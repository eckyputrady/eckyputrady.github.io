<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ecky Putrady</title>
  
  <subtitle>Personal Site</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://eckyputrady.com/"/>
  <updated>2017-09-11T11:21:21.000Z</updated>
  <id>http://eckyputrady.com/</id>
  
  <author>
    <name>Ecky Putrady</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Haskell, Redis, Mailgun and Heroku Scheduler</title>
    <link href="http://eckyputrady.com/2017/02/18/Haskell-Heroku-Mailgun-Redis/"/>
    <id>http://eckyputrady.com/2017/02/18/Haskell-Heroku-Mailgun-Redis/</id>
    <published>2017-02-18T13:00:00.000Z</published>
    <updated>2017-09-11T11:21:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>I recently worked on a Haskell application. One aspect of it is a background job that runs hourly. It connects to Redis and sends email using Mailgun. However, Haskell is not a mainstream language so there are not many tutorials of it. It took me quite a while to figure them all out, so I will write one in case it will save anyone’s (e.g. me in the future) time. Oh, and don’t worry to try it out since you can do all of this on Heroku free tier.</p><h2 id="Deploying-Haskell-Application-to-Heroku"><a href="#Deploying-Haskell-Application-to-Heroku" class="headerlink" title="Deploying Haskell Application to Heroku"></a>Deploying Haskell Application to Heroku</h2><p>First of all, let’s build a fresh Haskell project called <code>hero</code> with <a href="https://docs.haskellstack.org/en/stable/README/" target="_blank" rel="external">stack</a>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">stack</span> <span class="keyword">new</span> hero &amp;&amp; cd hero</div></pre></td></tr></table></figure><p>After that, let’s push our application as is to Heroku. If you read Heroku documentation, it requires a “Buildpack” to setup and deploy your application. Heroku provides official ones for popular frameworks, like Play or Rails. However, they don’t have one for Haskell, so we need either to build one or find one from the community. Fortunately, I found a working <a href="https://github.com/jackarthurm/heroku-buildpack-stack.git" target="_blank" rel="external">Haskell Buildpack</a>, although it’s quite obscure. So we’ll use that when creating a Heroku application.</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># initialize git repo</span></div><div class="line">git init</div><div class="line"><span class="keyword">echo</span> <span class="string">".stack-work"</span> &gt; <span class="string">.gitignore</span></div><div class="line">git add . &amp;&amp; git commit -m <span class="string">"Initial commit"</span></div><div class="line"></div><div class="line"><span class="comment"># create a Heroku application with custom Buildpack</span></div><div class="line">heroku create <span class="params">--buildpack</span> https:<span class="string">//github.com/jackarthurm/heroku-buildpack-stack.git</span></div><div class="line">git push heroku master</div></pre></td></tr></table></figure><p>We can verify that we have a working Haskell application on Heroku by running it on a one-off dyno as follow:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">heroku <span class="keyword">run</span><span class="bash"> /app/.<span class="built_in">local</span>/bin/hero-exe</span></div></pre></td></tr></table></figure><p>You should see “someFunc” being printed.</p><h2 id="Setting-Up-Scheduled-Job"><a href="#Setting-Up-Scheduled-Job" class="headerlink" title="Setting Up Scheduled Job"></a>Setting Up Scheduled Job</h2><p>Heroku is a fantastic platform. It has quite a number of add-ons. One of it is <a href="https://elements.heroku.com/addons/scheduler" target="_blank" rel="external">Heroku Scheduler</a>, an add-on to run arbitrary command on a one-off dyno. It’s not super flexible like cron, but it’s enough for my need. In addition to that, it’s totally free, which is awesome. So, we will use this to schedule our application to run hourly.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">heroku</span> <span class="selector-tag">addons</span><span class="selector-pseudo">:create</span> <span class="selector-tag">scheduler</span><span class="selector-pseudo">:standard</span></div><div class="line"><span class="selector-tag">heroku</span> <span class="selector-tag">addons</span><span class="selector-pseudo">:open</span> <span class="selector-tag">scheduler</span></div></pre></td></tr></table></figure><p>The last command should open a page to manage scheduled jobs. Go ahead and add a new job and put <code>/app/.local/bin/hero-exe +RTS -N</code> as the command to run. The <code>+RTS -N</code> is a parameter that you give to your Haskell application to enable parallelism by using as many cores as the machine has. Based on my experience, your application will run on an 8 cores machine by Heroku.</p><p>Wait until the time your job should be run by the scheduler and verify it by reading the logs:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">heroku logs -d scheduler</span></div></pre></td></tr></table></figure><p>You should see that “someFunc” is printed, indicating that your application has been scheduled successfully.</p><h2 id="Connecting-to-Redis"><a href="#Connecting-to-Redis" class="headerlink" title="Connecting to Redis"></a>Connecting to Redis</h2><p>Heroku provides Redis in a form of an <a href="https://elements.heroku.com/addons/heroku-redis" target="_blank" rel="external">add-on</a>. It has a generous free plan which gives you 25MB of storage. It, however, doesn’t persist your data on disk. Well, if you use Redis, mostly your use cases are caching. So that should not be a big deal anyway. Let’s add that to our application.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">heroku addon<span class="variable">s:create</span> heroku-<span class="keyword">redi</span><span class="variable">s:hobby</span>-dev</div></pre></td></tr></table></figure><p>After installing Redis add-on, your application will have an environment variable called <code>REDIS_URL</code> that you can use to connect to Redis. The format of the value is <code>redis://&lt;user&gt;:&lt;password&gt;@&lt;domain&gt;:&lt;port&gt;</code>. You could just ignore the <code>user</code> part since Redis doesn’t have a multi-user access feature.</p><p>One Haskell library that I have used successfully to connect to Redis is <a href="https://hackage.haskell.org/package/hedis" target="_blank" rel="external">hedis</a>. It’s simple to use and has a nice tutorial to get you started. Let’s start writing some code for connecting to Redis.</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&#123;-# LANGUAGE OverloadedStrings #-&#125;</span></div><div class="line"></div><div class="line"><span class="keyword">module</span> Lib</div><div class="line">    ( <span class="title">someFunc</span></div><div class="line">    ) <span class="keyword">where</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">qualified</span> Database.Redis <span class="keyword">as</span> Redis</div><div class="line"><span class="keyword">import</span> System.Environment</div><div class="line"><span class="keyword">import</span> Network.URI</div><div class="line"><span class="keyword">import</span> Data.Maybe</div><div class="line"><span class="keyword">import</span> Data.List.Split</div><div class="line"><span class="keyword">import</span> <span class="keyword">qualified</span> Data.ByteString.Char8 <span class="keyword">as</span> BS</div><div class="line"></div><div class="line"><span class="title">someFunc</span> :: <span class="type">IO</span> ()</div><div class="line"><span class="title">someFunc</span> = <span class="keyword">do</span></div><div class="line">  putStrLn <span class="string">"testing redis"</span></div><div class="line">  testRedis</div><div class="line">  putStrLn <span class="string">"testing redis done"</span></div><div class="line"></div><div class="line"><span class="title">testRedis</span> :: <span class="type">IO</span> ()</div><div class="line"><span class="title">testRedis</span> = <span class="keyword">do</span></div><div class="line">  conn &lt;- redisConn</div><div class="line">  hello &lt;- <span class="type">Redis</span>.runRedis conn $ <span class="keyword">do</span></div><div class="line">    <span class="type">Redis</span>.set <span class="string">"hello"</span> <span class="string">"world"</span></div><div class="line">    <span class="type">Redis</span>.get <span class="string">"hello"</span></div><div class="line">  putStrLn $ show hello</div><div class="line"></div><div class="line"><span class="title">redisConn</span> :: <span class="type">IO</span> <span class="type">Redis</span>.<span class="type">Connection</span></div><div class="line"><span class="title">redisConn</span> = <span class="keyword">do</span></div><div class="line">  env &lt;- getEnv <span class="string">"REDIS_URL"</span> <span class="comment">-- redis://user:pass@host:port</span></div><div class="line">  <span class="keyword">let</span> uri = fromJust $ parseURI env</div><div class="line">  <span class="keyword">let</span> auth = fromJust $ uriAuthority uri</div><div class="line">  <span class="keyword">let</span> host = uriRegName auth</div><div class="line">  <span class="keyword">let</span> port = tail $ uriPort auth</div><div class="line">  <span class="keyword">let</span> pass = uriUserInfo auth |&gt; splitOn <span class="string">":"</span> |&gt; \xs -&gt; xs !! <span class="number">1</span> |&gt; init |&gt; <span class="type">BS</span>.pack</div><div class="line">  <span class="type">Redis</span>.checkedConnect $ <span class="type">Redis</span>.defaultConnectInfo</div><div class="line">    &#123; <span class="type">Redis</span>.connectHost = host</div><div class="line">    , <span class="type">Redis</span>.connectPort = <span class="type">Redis</span>.<span class="type">PortNumber</span> (read port)</div><div class="line">    , <span class="type">Redis</span>.connectAuth = <span class="type">Just</span> pass</div><div class="line">    &#125;</div><div class="line"></div><div class="line">(|&gt;) :: a -&gt; (a -&gt; b) -&gt; b</div><div class="line"><span class="title">a</span> |&gt; f = f a</div></pre></td></tr></table></figure><p>Before compiling the application, you need to add few dependencies in your <code>hero.cabal</code> file. <code>hedis</code> is obviously needed, but you also need <code>split</code>, <code>bytestring</code> and <code>network-uri</code> as well. They are used to parse the <code>REDIS_URL</code> value.</p><p>Now let’s push that into Heroku to test whether it connects correctly.</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git commit -am <span class="string">"Test Redis"</span></div><div class="line">git push heroku <span class="literal">master</span></div><div class="line">heroku run /app/.local/bin/hero-exe</div></pre></td></tr></table></figure><p>You should see the following output indicating that the application has connected correctly to Redis.</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">testing </span>redis</div><div class="line">Right (Just "world")</div><div class="line"><span class="keyword">testing </span>redis done</div></pre></td></tr></table></figure><h2 id="Sending-Email-via-Mailgun"><a href="#Sending-Email-via-Mailgun" class="headerlink" title="Sending Email via Mailgun"></a>Sending Email via Mailgun</h2><p>Before discovering Mailgun, I used to interface with SMTP directly. Boy, it was a <a href="http://www.urbandictionary.com/define.php?term=P.I.T.A" target="_blank" rel="external">PITA</a>. Few problems arose like your mail provider doesn’t give access because your application is not considered secure and the Haskell library in this area is not good. Mailgun eases the email sending by allowing you to do it via REST API. They also give you a starter domain for testing. So it almost works out of the box, basically.</p><p>Haskell, fortunately, has a Mailgun wrapper library called <a href="https://hackage.haskell.org/package/hailgun" target="_blank" rel="external">hailgun</a>. The documentation is not as good as hedis since it doesn’t give you any tutorial to get started. It’s quite common in Haskell-land for a library to be documented poorly. However, this library is quite simple that if you just follow the types, you can figure it out easily what to do. But still, a bit of tutorial could save me time here.</p><p>So, after setting up a Mailgun account, let’s write some code to test it:</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&#123;-# LANGUAGE OverloadedStrings #-&#125;</span></div><div class="line"></div><div class="line"><span class="keyword">module</span> Lib</div><div class="line">    ( <span class="title">someFunc</span></div><div class="line">    ) <span class="keyword">where</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> Mail.Hailgun</div><div class="line"><span class="keyword">import</span> Data.Either.Unwrap</div><div class="line"></div><div class="line"><span class="title">someFunc</span> :: <span class="type">IO</span> ()</div><div class="line"><span class="title">someFunc</span> = <span class="keyword">do</span></div><div class="line">  putStrLn <span class="string">"testing mail"</span></div><div class="line">  testEmail</div><div class="line">  putStrLn <span class="string">"testing mail done"</span></div><div class="line"></div><div class="line"><span class="title">testEmail</span> :: <span class="type">IO</span> ()</div><div class="line"><span class="title">testEmail</span> = sendEmail hailgunCtx hailgunMsg &gt;&gt;= (putStrLn . show)</div><div class="line"></div><div class="line"><span class="title">hailgunCtx</span> =</div><div class="line">  <span class="type">HailgunContext</span> <span class="string">"get.domain.from.mailgun"</span></div><div class="line">                 <span class="string">"get.key.from.mailgun"</span></div><div class="line">                 <span class="type">Nothing</span></div><div class="line"></div><div class="line"><span class="title">hailgunMsg</span> = fromRight $</div><div class="line">  hailgunMessage <span class="string">"Test Subject"</span></div><div class="line">                 (<span class="type">TextOnly</span> <span class="string">"Test content"</span>)</div><div class="line">                 <span class="string">"address.for.respond@gmail.com"</span></div><div class="line">                 emptyMessageRecipients &#123; recipientsTo = [<span class="string">"recipient@gmail.com"</span>] &#125;</div><div class="line">                 []</div></pre></td></tr></table></figure><p>You need to add <code>hailgun</code> and <code>either-unwrap</code> in your <code>hero.cabal</code> file. We don’t need to run this in Heroku for starter. Let’s just run it in GHCi and call the function directly:</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">stack</span> ghci</div><div class="line"><span class="comment">*Main&gt; someFunc</span></div></pre></td></tr></table></figure><p>You should receive the email in the email you listed as the recipient. You will also get the following output indicating that we have connected succesfully to Mailgun.</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">testing </span>mail</div><div class="line">Right (HailgunSendResponse &#123;hsrMessage = "Queued. Thank you.", hsrId = "&lt;xxxxx&gt;"&#125;)</div><div class="line"><span class="keyword">testing </span>mail done</div></pre></td></tr></table></figure><p>Obviously, you don’t want to hardcode your Mailgun credentials in your source code. The best practice is to put it in the environment variables. In Heroku, you can add an environment variable via <code>heroku config:set &lt;KEY&gt;=&lt;VALUE&gt;</code> command. We can adjust our code accordingly to read the credentials from the environment variables instead.</p><h2 id="Closing"><a href="#Closing" class="headerlink" title="Closing"></a>Closing</h2><p>In this blog post, I have shown you how Haskell can be used for building practical application. All the code above is not intended as production-ready code as it doesn’t handle errors gracefully. I keep it that way for simplicity.</p><p>That’s it, folks! Hope it helps.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I recently worked on a Haskell application. One aspect of it is a background job that runs hourly. It connects to Redis and sends email u
      
    
    </summary>
    
    
      <category term="haskell" scheme="http://eckyputrady.com/tags/haskell/"/>
    
      <category term="heroku" scheme="http://eckyputrady.com/tags/heroku/"/>
    
      <category term="redis" scheme="http://eckyputrady.com/tags/redis/"/>
    
      <category term="mailgun" scheme="http://eckyputrady.com/tags/mailgun/"/>
    
  </entry>
  
  <entry>
    <title>The 5 Phases Of Startup</title>
    <link href="http://eckyputrady.com/2015/01/01/The-5-Phases-Of-Startup/"/>
    <id>http://eckyputrady.com/2015/01/01/The-5-Phases-Of-Startup/</id>
    <published>2015-01-01T03:44:47.000Z</published>
    <updated>2017-09-11T11:21:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve been reading about startup since a year ago, on and off. I’ve read books and watched videos. So I think I’ll write what I learn to help myself solidify those ideas.</p><p>There are many definitions of what startup is, but the one that resonates with me the most is Steve Blank’s:</p><blockquote><p>A startup is a <em>temporary</em> organization used to <em>search</em> for a repeatable and scalable business model.</p></blockquote><p>I do emphasis on the “temporary” because the goal of startup is not to be a startup anymore. I also emphasis on “search” because you’ll try different ways to find a scalable business model.</p><p>When building a startup, people used to spend months to build the product/service and hope somebody will like it and pay. This approach is risky. You will not know whether there will be enough people to buy your product until you have finished building it.</p><p>This risky approach is quite common until Eric Ries published Lean Startup book and began the Lean movement. The core idea of Lean is to cut waste. You can spend 2 hours building a landing page instead of 6 months building a complete solution to learn if anyone is interested with your product. In other words, you “build what you can sell” instead of “sell what you can build”.</p><p>This idea is the foundation of the books I’ve read. Each of those book implements the idea differently. Well, they are not totally different. They are just named and grouped differently. However, I find that the one from Lean Analytics as the most intuitive.</p><p>In Lean Analytics, Alistair says that, to build a successful startup faster you would want to go through these phases:</p><ol><li>Empathy</li><li>Stickiness</li><li>Virality</li><li>Revenue</li><li>Scale</li></ol><p>In Empathy phase, your goal is to find a problem worth solving and the most proper solution for it. A problem worth solving is a problem that is painful enough for a big enough number of people. If the problem is not painful enough, nobody will bother to pay you to solve it. If there is only a handful of people with the problem, you might not sustain in the long run.</p><p>The fastest way to find a problem worth solving is to talk to your target customer. This sounds easy, but it is not. There are some techniques for talking to those people, but I’ll not detail it here.</p><p>In Stickiness phase, your goal is to tweak your product so that your users stick around. If you are making a game and your users only play once and not finish the game, do you think your game is a success?</p><p>One common startup mistake is spending lots of money to acquire users only to find out that 98% of them don’t stick around. When you think about this, it makes sense to acquire a few users first and tweak your product to make them stick before acquiring lots of users.</p><p>In Virality phase, your goal is to make your current users eager to tell others about you. They will bring new users to your product. Virality helps you spend less money when acquiring users later on.</p><p>In Revenue phase, you focus on maximizing revenue per user. You tweak the pricing or introduce new premium features.</p><p>Lastly, the Scale phase. This means you are confident about your business and starts to pour more money to gain more market.</p><p>People say that to make a successful startup you need 3 things: Focus, focus, and focus. My problem with this statement is that it’s not clear what to focus on. The phases outlined above should be a good guidance on what to focus on.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I’ve been reading about startup since a year ago, on and off. I’ve read books and watched videos. So I think I’ll write what I learn to h
      
    
    </summary>
    
    
      <category term="startup" scheme="http://eckyputrady.com/tags/startup/"/>
    
  </entry>
  
</feed>
